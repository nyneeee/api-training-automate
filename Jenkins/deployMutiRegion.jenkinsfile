pipeline {
    agent any
    parameters {
        choice(
            name: 'GH_RUNNER_TAG',
            choices: ['cpc-ate-dev', 'cpc-ate-prd'],
            description: 'Runner to run tests.'
        )
        string(
            name: 'REGION',
            description: 'Region to run tests (comma-separated for multiple regions, e.g., "asse,asea")',
            defaultValue: 'asse,asea'
        )
        choice(
            name: 'SITE_TEST',
            choices: ['prd', 'sit'],
            description: 'Site to run tests.'
        )
        choice(
            name: 'BRANCH_REF',
            choices: ['main', 'sit'],
            description: 'Branch to run tests.'
        )
    }
    stages {
        stage('Analyze') {
            steps {
                echo "Analyze"
            }
        }
        stage('Trigger Robot Automate') {
            steps {
                script {
                    def errorRegions = []  // List ที่ใช้เก็บ region ที่มี error
                    def successRegions = []  // List ที่ใช้เก็บ region ที่ทดสอบผ่าน
                    def regions = params.REGION.split(',').collect { it.trim() }
                    def tasks = [:]

                    regions.each { region ->
                        tasks["Test ${region}"] = {
                            try {
                                echo "Running tests for region: ${region}"
                                build job: "Robot Automate",
                                      parameters: [
                                          string(name: 'GH_RUNNER_TAG', value: params.GH_RUNNER_TAG),
                                          string(name: 'REGION', value: region),
                                          string(name: 'SITE_TEST', value: params.SITE_TEST),
                                          string(name: 'BRANCH_REF', value: params.BRANCH_REF),
                                          string(name: 'JOB_TEST', value: 'Pre-Test')
                                      ]
                                echo "Tests for region ${region} completed successfully."
                            } catch (Exception e) {
                                error "Tests for region ${region} failed: ${e.message}"
                            }
                        }
                    }
                    parallel(tasks)
                }
            }
        }
        stage('Deploy Mockup') {
            steps {
                script {
                    def DeployMuti = [:]
                    def regions = params.REGION.split(',').collect { it.trim() }
                    regions.each { region ->
                        DeployMuti["Deploy ${region}"] = {
                            echo "Deploy region: ${region}"
                        }
                    }
                    parallel(DeployMuti)
                }
            }
        }
        stage('Trigger Post-Test Automate') {
            steps {
                script {
                    def errorRegions = []  // List ที่ใช้เก็บ region ที่มี error
                    def successRegions = []  // List ที่ใช้เก็บ region ที่ทดสอบผ่าน
                    def regions = params.REGION.split(',').collect { it.trim() }
                    def tasks = [:]

                    regions.each { region ->
                        tasks["Test ${region}"] = {
                            try {
                                echo "Running tests for region: ${region}"
                                build job: "Robot Pre-Test",
                                      parameters: [
                                          string(name: 'GH_RUNNER_TAG', value: params.GH_RUNNER_TAG),
                                          string(name: 'REGION', value: region),
                                          string(name: 'SITE_TEST', value: params.SITE_TEST),
                                          string(name: 'BRANCH_REF', value: params.BRANCH_REF),
                                          string(name: 'SECRET_QA_USER_GMAIL', value: "${SECRET_QA_USER_GMAIL}"),
                                          string(name: 'SECRET_QA_PASS_GMAIL', value: "${SECRET_QA_PASS_GMAIL}"),
                                          string(name: 'JOB_TEST', value: 'Post-Test')
                                      ]
                                echo "Tests for region ${region} completed successfully."
                            } catch (Exception e) {
                                error "Tests for region ${region} failed: ${e.message}"
                            }
                        }
                    }
                    parallel(tasks)
                }
            }
        }
    }
}
