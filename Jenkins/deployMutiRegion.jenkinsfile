pipeline {
    agent any
    parameters {
        choice(
            name: 'GH_RUNNER_TAG',
            choices: ['cpc-ate-dev', 'cpc-ate-prd'],
            description: 'Runner to run tests.'
        )
        string(
            name: 'REGION',
            description: 'Region to run tests (comma-separated for multiple regions, e.g., "asse,asea")',
            defaultValue: 'asse,asea'
        )
        choice(
            name: 'SITE_TEST',
            choices: ['prd', 'sit'],
            description: 'Site to run tests.'
        )
        choice(
            name: 'BRANCH_REF',
            choices: ['main', 'sit'],
            description: 'Branch to run tests.'
        )
    }
    stages {
        stage('Analyze') {
            steps {
                echo "Analyze"
            }
        }
        stage('Trigger Pre-Test Automate') {
            steps {
                script {
                    def regions = params.REGION.split(',').collect { it.trim() }
                    def tasks = [:]

                    regions.each { region ->
                        tasks["Test ${region}"] = {
                            try {
                                echo "Running tests for region: ${region}"
                                build job: "Robot Automate",
                                      parameters: [
                                          string(name: 'GH_RUNNER_TAG', value: params.GH_RUNNER_TAG),
                                          string(name: 'REGION', value: region),
                                          string(name: 'SITE_TEST', value: params.SITE_TEST),
                                          string(name: 'BRANCH_REF', value: params.BRANCH_REF),
                                          string(name: 'JOB_TEST', value: 'Pre-Test')
                                      ]
                                echo "Tests for region ${region} completed successfully."
                            } catch (Exception e) {
                                error "Tests for region ${region} failed: ${e.message}"
                            }
                        }
                    }
                    parallel(tasks)
                }
            }
        }
        stage('Deploy Mockup') {
            steps {
                script {
                    def DeployMuti = [:]
                    def regions = params.REGION.split(',').collect { it.trim() }
                    regions.each { region ->
                        DeployMuti["Deploy ${region}"] = {
                            echo "Deploy region: ${region}"
                        }
                    }
                    parallel(DeployMuti)
                }
            }
        }
        stage('Trigger Post-Test Automate') {
            steps {
                script {
                    def regions = params.REGION.split(',').collect { it.trim() }
                    def tasks = [:]

                    regions.each { region ->
                        tasks["Test ${region}"] = {
                            try {
                                echo "Running tests for region: ${region}"
                                build job: "Robot Automate",
                                      parameters: [
                                          string(name: 'GH_RUNNER_TAG', value: params.GH_RUNNER_TAG),
                                          string(name: 'REGION', value: region),
                                          string(name: 'SITE_TEST', value: params.SITE_TEST),
                                          string(name: 'BRANCH_REF', value: params.BRANCH_REF),
                                          string(name: 'JOB_TEST', value: 'Post-Test')
                                      ]
                                echo "Tests for region ${region} completed successfully."
                            } catch (Exception e) {
                                error "Tests for region ${region} failed: ${e.message}"
                            }
                        }
                    }
                    parallel(tasks)
                }
            }
        }
        stage('Trigger Compare-Test Automate') {
            steps {
                script {
                    def errorRegions = []  // List ที่ใช้เก็บ region ที่มี error
                    def successRegions = []  // List ที่ใช้เก็บ region ที่ทดสอบผ่าน
                    def regions = params.REGION.split(',').collect { it.trim() }
                    def tasks = [:]

                    regions.each { region ->
                        tasks["Test ${region}"] = {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                try {
                                    echo "Running tests for region: ${region}"
                                    build job: "Robot Automate",
                                        parameters: [
                                            string(name: 'GH_RUNNER_TAG', value: params.GH_RUNNER_TAG),
                                            string(name: 'REGION', value: region),
                                            string(name: 'SITE_TEST', value: params.SITE_TEST),
                                            string(name: 'BRANCH_REF', value: params.BRANCH_REF),
                                            string(name: 'JOB_TEST', value: 'Compare-Test')
                                        ]
                                    echo "Tests for region ${region} completed successfully."
                                    successRegions << region  // เก็บ region ที่ทดสอบผ่านลงใน list
                                } catch (Exception e) {
                                    errorRegions << region  // เก็บ region ที่มี error ลงใน list
                                    error "Tests for region ${region} failed: ${e.message}"
                                }
                            }
                        }
                    }
                    parallel(tasks)

                    // Debug Success Regions
                    echo "Success regions: ${successRegions.join(',')}"

                    // แสดงรายชื่อ regions ที่มี error หลังจากจบ parallel
                    if (errorRegions) {
                        echo "Errors encountered in regions: ${errorRegions.join(', ')}"
                        env.ERROR_REGIONS = errorRegions.join(',')  // เก็บค่า errorRegions ไว้ใน environment variable แปลงค่าเป็น String
                    }

                    // แสดงรายชื่อ regions ที่ทดสอบผ่าน
                    if (successRegions) {
                        echo "Success in regions: ${successRegions.join(', ')}"
                        env.SUCCESS_REGIONS = successRegions.join(',') 
                    }
                }
            }
        }
        stage('Rollout') {
            when {
                expression {
                    return env.SUCCESS_REGIONS && env.SUCCESS_REGIONS.split(',').findAll { it }.size() > 0
                }
            }
            steps {
                echo "SUCCESS regions: ${env.SUCCESS_REGIONS}"
                echo "FAIL regions: ${env.ERROR_REGIONS}"
            }
        }
    }
}
