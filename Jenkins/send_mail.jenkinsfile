pipeline {
    agent any
    parameters {
        string(name: 'ARTIFACTS', defaultValue: '', description: 'Artifacts')
        string(name: 'BUILD_NUMBER', defaultValue: '', description: 'Build Number')
        string(name: 'REGION', defaultValue: '', description: '')
        string(name: 'SITE_TEST', defaultValue: '', description: '')
        string(name: 'BRANCH_REF', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_TOTAL', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_PASS', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_FAIL', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_SKIP', defaultValue: '', description: '')
        string(name: 'JOB', defaultValue: '', description: '')
        string(name: 'STATUS_JOB', defaultValue: '', description: '')
        string(name: 'USER_GMAIL', defaultValue: '', description: '')
        string(name: 'PASS_GMAIL', defaultValue: '', description: '')
    }
    environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }
    stages {
        stage('Receive Artifacts') {
            steps {
                script {
                    echo "ARTIFACTS: ${params.ARTIFACTS}"
                    echo "BUILD_NUMBER: ${params.BUILD_NUMBER}"
                    copyArtifacts projectName: 'Robot Pre-Test', filter: "${params.ARTIFACTS}", selector: specific("${params.BUILD_NUMBER}")
                    sh '''
                        ls -lrt
                        cd Testsuites
                        ls -lrt
                    '''
                }
            }
        }
        stage('Convert Site/Region to Upper And Set Variable') {
            steps {
                script {
                    env.SITE_TEST_UPPER = sh(script: "echo ${params.SITE_TEST} | awk '{print toupper(\$0)}'", returnStdout: true).trim()
                    env.REGION_UPPER = sh(script: "echo ${params.REGION} | awk '{print toupper(\$0)}'", returnStdout: true).trim()
                    env.RECEIVE_EMAIL = "patipan.w@entronica.co.th, kachain.a@entronica.co.th, wattana.k@entronica.co.th"
                    env.ATTACHMENT_NAME = sh(script: "basename ${params.ARTIFACTS}", returnStdout: true).trim()
                }
            }
        }
        stage('Echo Variables') {
            steps {
                script {
                    echo "SITE_TEST_UPPER: ${env.SITE_TEST_UPPER}"
                    echo "REGION_UPPER: ${env.REGION_UPPER}"
                    echo "RECEIVE_EMAIL: ${env.RECEIVE_EMAIL}"
                    echo "JOB: ${params.JOB}"
                    echo "STATUS_JOB: ${params.STATUS_JOB}"
                    echo "ARTIFACTS: ${env.ATTACHMENT_NAME}"
                    echo "USER_GMAIL: ${params.USER_GMAIL}"
                    echo "PASS_GMAIL: ${params.PASS_GMAIL}"
                    echo "RESULT_TEST_TOTAL: ${params.RESULT_TEST_TOTAL}"
                    echo "RESULT_TEST_PASS: ${params.RESULT_TEST_PASS}"
                    echo "RESULT_TEST_FAIL: ${params.RESULT_TEST_FAIL}"
                    echo "RESULT_TEST_SKIP: ${params.RESULT_TEST_SKIP}"
                }
            }
        }
        stage('Send Email') {
            steps {
                script {
                    sh """
                    python3 - << EOF
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# Email settings
subject_email = "WORKFLOW-${env.SITE_TEST_UPPER}-JENKINS_‡∏ó‡∏î‡∏™‡∏≠‡∏ö-ATE-${env.REGION_UPPER}: ${params.STATUS_JOB} / ${params.JOB}"
heading_email = "Automate Result : ${params.STATUS_JOB}"
sender_email = "${params.USER_GMAIL}"
receiver_email = "${env.RECEIVE_EMAIL}"
password = "${params.PASS_GMAIL}"
attachments_file = "${params.ARTIFACTS}"
attachment_name = "${env.ATTACHMENT_NAME}"
on_region = "${env.REGION_UPPER}"
on_site_test = "${env.SITE_TEST_UPPER}"
pre_total = "${params.RESULT_TEST_TOTAL}"  
pre_passed = "${params.RESULT_TEST_PASS}"
pre_failed = "${params.RESULT_TEST_FAIL}"
pre_skiped = "${params.RESULT_TEST_SKIP}"

# Create the email content
msg = MIMEMultipart('mixed')
msg['Subject'] = subject_email
msg['From'] = sender_email
msg['To'] = receiver_email

html = f\"\"\"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 5px; }}
        .container {{ max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ccc; border-radius: 5px; }}
        h1 {{ color: #000000; }}   
        p {{ color: #5f5f5f; }}
    </style>
</head>
<body>
    <div class="container">
        <h2>{heading_email}</h2>
        <p>ü§ñ Workflow Main. Please find the summary of the test results below:</p>
        <div id="group_detail">
            <p id="detail">Job: Pre-Test</p>
            <p id="detail">Region: {on_region}</p>
            <p id="detail">Site Test: {on_site_test}</p>
        </div>
        <p>Total Pre-Test: {pre_total}</p>
        <p>‚úÖ Passed: {pre_passed}, ‚ùå Failed: {pre_failed}, ‚è≠Ô∏è Skiped: {pre_skiped}</p>
        <p>Thank you.</p>
    </div>
</body>
</html>
\"\"\"
msg.attach(MIMEText(html, 'html'))

with open(attachments_file, "rb") as attachment:
    part = MIMEBase("application", "octet-stream")
    part.set_payload(attachment.read())
encoders.encode_base64(part)
part.add_header("Content-Disposition", f"attachment; filename={attachment_name}")  # Use the extracted filename
msg.attach(part)

with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email.split(', '), msg.as_string())
EOF
            """
                }
            }
        }
    }
}