pipeline {
    agent any
    parameters {
        string(name: 'ARTIFACTS', defaultValue: '', description: 'Artifacts')
        string(name: 'BUILD_NUMBER', defaultValue: '', description: 'Build Number')
        string(name: 'REGION', defaultValue: '', description: '')
        string(name: 'SITE_TEST', defaultValue: '', description: '')
        string(name: 'BRANCH_REF', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_TOTAL', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_PASS', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_FAIL', defaultValue: '', description: '')
        string(name: 'RESULT_TEST_SKIP', defaultValue: '', description: '')
        string(name: 'JOB', defaultValue: '', description: '')
        string(name: 'STATUS_JOB', defaultValue: '', description: '')
        string(name: 'USER_GMAIL', defaultValue: '', description: '')
        string(name: 'PASS_GMAIL', defaultValue: '', description: '')
    }
    environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }
    stages {
        stage('Receive Artifacts') {
            steps {
                script {
                    echo "ARTIFACTS: ${params.ARTIFACTS}"
                    echo "BUILD_NUMBER: ${params.BUILD_NUMBER}"
                    copyArtifacts projectName: 'Robot Pre-Test', filter: "${params.ARTIFACTS}", selector: specific("${params.BUILD_NUMBER}")
                    sh(script: """
                        ls -lrt
                        cd Testsuites
                        ls -lrt
                    """)
                }
            }
        }
        stage('Convert Site/Region to Upper And Set Variable') {
            steps {
                script {
                    def siteTestUpper = sh(
                        script: "echo ${params.SITE_TEST} | awk '{print toupper(\$0)}'",
                        returnStdout: true
                    ).trim()

                    def regionUpper = sh(
                        script: "echo ${params.REGION} | awk '{print toupper(\$0)}'",
                        returnStdout: true
                    ).trim()
                    env.SITE_TEST_UPPER = siteTestUpper
                    env.REGION_UPPER = regionUpper
                    env.RECEIVE_EMAIL = "patipan.w@entronica.co.th, kachain.a@entronica.co.th, wattana.k@entronica.co.th"
                }
            }
        }
        stage('Echo Variable') {
            steps {
                echo "SITE_TEST_UPPER: ${env.SITE_TEST_UPPER}"
                echo "REGION_UPPER: ${env.REGION_UPPER}"
                echo "RECEIVE_EMAIL: ${env.RECEIVE_EMAIL}"
                echo "JOB: ${params.JOB}"
                echo "STATUS_JOB: ${params.STATUS_JOB}"
                echo "ARTIFACTS: ${params.ARTIFACTS}"
                echo "USER_GMAIL: ${params.USER_GMAIL}"
                echo "PASS_GMAIL: ${params.PASS_GMAIL}"
                echo "RESULT_TEST_TOTAL: ${params.RESULT_TEST_TOTAL}"
                echo "RESULT_TEST_PASS: ${params.RESULT_TEST_PASS}"
                echo "RESULT_TEST_FAIL: ${params.RESULT_TEST_FAIL}"
                echo "RESULT_TEST_SKIP: ${params.RESULT_TEST_SKIP}"
            }
        }
        stage('Send Email') {
            steps {
                sh """
                python3 - << EOF
                import smtplib
                from email.mime.multipart import MIMEMultipart
                from email.mime.text import MIMEText
                from email.mime.base import MIMEBase
                from email import encoders

                # Email settings
                subject_email = "WORKFLOW-${env.SITE_TEST_UPPER}-JENKINS_‡∏ó‡∏î‡∏™‡∏≠‡∏ö-ATE-${env.REGION_UPPER}: ${params.STATUS_JOB} / ${params.JOB}"
                heading_email = "Automate Result : ${params.STATUS_JOB}"
                sender_email = "${params.USER_GMAIL}"
                receiver_email = "${env.RECEIVE_EMAIL}"
                password = "${params.PASS_GMAIL}"
                attachments_file = "${params.ARTIFACTS}"
                on_region = "${env.REGION_UPPER}"
                on_site_test = "${env.SITE_TEST_UPPER}"
                pre_total = "${params.RESULT_TEST_TOTAL}"  
                pre_passed = "${params.RESULT_TEST_PASS}"
                pre_failed = "${params.RESULT_TEST_FAIL}"
                pre_skiped = "${params.RESULT_TEST_SKIP}"

                # Create the email content
                msg = MIMEMultipart('mixed')
                msg['Subject'] = subject_email
                msg['From'] = sender_email
                msg['To'] = receiver_email

                html = f'''
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Test Report</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; margin: 5px; }}
                        .container {{ max-width: 800px; margin: 0 300 auto auto; padding: 5px 20px 20px 20px; border: 1px solid #ccc; border-radius: 5px; }}
                        h1 {{ color: #000000; }}   
                        p {{ color: #5f5f5f; }}
                        #resource {{ color: #232222; margin: 0 0 0 30px; }}
                        #detail {{ color: #232222; margin: 0 0 0 30px; }}   
                        #group_detail {{ padding: 0 0 5px 0; }}            
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h2>{heading_email}</h2>
                        <p>ü§ñ Workflow Main. Please find the summary of the test results below:</p>
                        <div id="group_detail">
                            <p id="detail">Workflow: Main [Error]</p>
                            <p id="detail">Job: Pre-Test</p>
                            <p id="detail">Region: {on_region}</p>
                            <p id="detail">Site Test: {on_site_test}</p>
                        </div>
                        <p id="resource">Total Pre-Test: {pre_total}</p>
                        <p id="resource">‚úÖ Passed: {pre_passed} , ‚ùå Failed: {pre_failed} , ‚è≠Ô∏è Skiped: {pre_skiped}</p>
                        <p>Thank you.</p>
                    </div>
                </body>
                </html>
                '''
                msg.attach(MIMEText(html, 'html'))

                log_file_path = attachments_file
                with open(log_file_path, "rb") as attachment:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(attachment.read())

                encoders.encode_base64(part)
                part.add_header(
                    "Content-Disposition",
                    f"attachment; filename={attachments_file}",
                )
                part.add_header("Content-ID", "<log.html>")
                msg.attach(part)

                with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
                    server.login(sender_email, password)
                    server.sendmail(sender_email, receiver_email.split(', '), msg.as_string())
                EOF
                """
            }
        }
    }
}