pipeline {
    agent any
    parameters {
        string(name: 'GH_RUNNER_TAG', defaultValue: '', description: '')
        string(name: 'REGION', defaultValue: '', description: '')
        string(name: 'SITE_TEST', defaultValue: '', description: '')
        string(name: 'BRANCH_REF', defaultValue: '', description: '')
    }
    environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }
    stages {
        stage('Test Checkout GitHub') {
            steps {
                script {
                    checkout scmGit(branches: [[name: "*/${params.BRANCH_REF}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/nyneeee/api-training-automate.git']])
                }
                sh 'ls -lrt'
                echo "${params.GH_RUNNER_TAG}"
                echo "${params.REGION}"
                echo "${params.SITE_TEST}"
            }
        }
        stage('Test Grep CMD Run PreTest Robot') {
            steps {
                script {
                    def CMD_RUN_PRE_TEST = sh(
                        script: """
                            grep 'cmd_run_robot_${params.REGION}_${params.SITE_TEST}' ./Config/config_cicd_run_robot.yml | cut -d ':' -f 2-
                        """,
                        returnStdout: true
                    ).trim()  
                    if (!CMD_RUN_PRE_TEST) {
                        error "CMD_RUN_PRE_TEST is empty or null. Failing the build."
                    }
                    echo "CMD_RUN_PRE_TEST: ${CMD_RUN_PRE_TEST}"
                    env.CMD_RUN_PRE_TEST = CMD_RUN_PRE_TEST
                }
            }
        }
        stage('Run Robot PreTest') {
            steps {
                script {
                    try {
                        sh(script: """
                            cd Testsuites
                            ${env.CMD_RUN_PRE_TEST}
                        """)
                    } catch (Exception e) {
                        env.errorRegion = params.REGION
                        echo "Pre-Test for region ${env.errorRegion} failed: ${e.message}"
                    }
                }
            }
            post {
                always {
                    script {
                        sh(script: """
                            cd Testsuites
                            ls -lrt
                        """)
                        archiveArtifacts artifacts: 'Testsuites/log_${params.REGION}_${params.SITE_TEST}/**', allowEmptyArchive: true
                        echo "Upload archiveArtifacts Success."
                    }
                }
                failure {
                    echo "Send Email: Pre-Test for region ${env.errorRegion} failed: ${e.message}"
                }
            }
        }
    }
}
