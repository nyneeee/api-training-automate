pipeline {
    agent any
    parameters {
        string(name: 'GH_RUNNER_TAG', defaultValue: '', description: '')
        string(name: 'REGION', defaultValue: '', description: '')
        string(name: 'SITE_TEST', defaultValue: '', description: '')
        string(name: 'BRANCH_REF', defaultValue: '', description: '')
    }
    environment {
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }
    stages {
        stage('Test Checkout GitHub') {
            steps {
                script {
                    checkout scmGit(branches: [[name: "*/${params.BRANCH_REF}"]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/nyneeee/api-training-automate.git']])
                }
                sh 'ls -lrt'
                echo "${params.GH_RUNNER_TAG}"
                echo "${params.REGION}"
                echo "${params.SITE_TEST}"
            }
        }
        stage('Test Grep CMD Run PreTest Robot') {
            steps {
                script {
                    def CMD_RUN_PRE_TEST = sh(
                        script: """
                            grep 'cmd_run_robot_${params.REGION}_${params.SITE_TEST}' ./Config/config_cicd_run_robot.yml | cut -d ':' -f 2-
                        """,
                        returnStdout: true
                    ).trim()  
                    if (!CMD_RUN_PRE_TEST) {
                        error "CMD_RUN_PRE_TEST is empty or null. Failing the build."
                    }
                    echo "CMD_RUN_PRE_TEST: ${CMD_RUN_PRE_TEST}"
                    env.CMD_RUN_PRE_TEST = CMD_RUN_PRE_TEST
                }
            }
        }
        stage('Run Robot PreTest') {
            steps {
                script {
                    try {
                        sh(script: """
                            cd Testsuites
                            ${env.CMD_RUN_PRE_TEST}
                        """)
                    } catch (Exception e) {
                        env.errorRegion = params.REGION
                        error "Pre-Test for region ${env.errorRegion} failed: ${e.message}"
                    }
                }
            }
            post {
                always {
                    script {
                        def logDir = "Testsuites/log_${params.REGION}_${params.SITE_TEST}/"
                        if (fileExists(logDir)) {
                            sh(script: """
                                cd Testsuites
                                zip -r log_${params.REGION}_${params.SITE_TEST}.zip log_${params.REGION}_${params.SITE_TEST}/
                                ls -lrt
                            """)
                            archiveArtifacts artifacts: "Testsuites/log_${params.REGION}_${params.SITE_TEST}.zip", allowEmptyArchive: true
                            echo "Upload log_${params.REGION}_${params.SITE_TEST} archiveArtifacts Success."
                        } else {
                            error "Log directory not found: ${logDir}. Skipping ZIP creation."
                        }
                    }
                }
                failure {
                    script {
                        def xmlPath = "Testsuites/log_${params.REGION}_${params.SITE_TEST}/output.xml"
                        if (fileExists(xmlPath)) {
                            def preStatus = sh(script: """
                                grep '<stat pass="[0-9]*" fail="[0-9]*" skip="[0-9]*">All Tests</stat>' ${xmlPath} | 
                                sed -n 's/.*pass="\\([0-9]*\\)" fail="\\([0-9]*\\)" skip="\\([0-9]*\\)">All Tests<\\/stat>.*/Pass: \\1, Fail: \\2, Skip: \\3/p'
                            """, returnStdout: true).trim()
                            
                            // ดำเนินการแยกค่า Pass, Fail, Skip
                            def PRE_PASS = sh(script: """
                                echo "${preStatus}" | grep -oP '(?<=Pass: )[0-9]+'
                            """, returnStdout: true).trim()

                            def PRE_FAIL = sh(script: """
                                echo "${preStatus}" | grep -oP '(?<=Fail: )[0-9]+'
                            """, returnStdout: true).trim()

                            def PRE_SKIP = sh(script: """
                                echo "${preStatus}" | grep -oP '(?<=Skip: )[0-9]+'
                            """, returnStdout: true).trim()

                            PRE_PASS = PRE_PASS ?: "0"
                            PRE_FAIL = PRE_FAIL ?: "0"
                            PRE_SKIP = PRE_SKIP ?: "0"

                            def PRE_TOTAL = (PRE_PASS.toInteger() + PRE_FAIL.toInteger() + PRE_SKIP.toInteger())
                            echo "Pre-Test TOTAL: ${PRE_TOTAL}"
                            echo "Pre-Test PASS: ${PRE_PASS}"
                            echo "Pre-Test FAIL: ${PRE_FAIL}"
                            echo "Pre-Test SKIP: ${PRE_SKIP}"
                        } else {
                            error "output.xml not found at path: ${xmlPath}"
                        }
                    }
                }
            }
        }
    }
}
